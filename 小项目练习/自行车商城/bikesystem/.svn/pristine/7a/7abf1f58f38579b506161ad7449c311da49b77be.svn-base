package com.bikesystem.hs.service;

import com.bikesystem.entity.BikeRent;
import com.bikesystem.entity.RentOrderInfo;
import com.bikesystem.entity.User;
import com.bikesystem.hs.dao.IBikeRentDao;
import com.bikesystem.hs.dao.IUserRentDao;
import com.bikesystem.txz.interfaces.dao.IUserDao;

/**
 * 做具体的用户支付预约租金：
 * 	1.验证余额
 * 	2.用户金额计算
 * 		(1).付款时支付总的租金
 * 		(2).还车时商家计算总的租金和租时费用，作计算后归还给用户剩余的租金
 * 	3.数据库信息交互
 * 	4.安全验证（待开发）
 * @author bwfadmin
 *
 */
public class RentPayService implements IRentPayService {
	
	private IUserDao userDao;
	private IUserRentDao userRentDao;
	private IBikeRentDao bikeRentDao;
	
	
	public RentPayService(IUserDao userDao, IUserRentDao userRentDao, IBikeRentDao bikeRentDao) {
		super();
		this.userDao = userDao;
		this.userRentDao = userRentDao;
		this.bikeRentDao = bikeRentDao;
	}

	/**
	 * 根据传入的所需支付的总租金来判断余额是否足够
	 * @param allPayPrice
	 * @return
	 */
	private boolean verifyBalance(RentOrderInfo rentOrderInfo) {
		if(rentOrderInfo.getAllPayPrice()<rentOrderInfo.getUser().getBalance()){
			return true;
		}
		return false;
	}

	@Override
	public boolean caculatePayBalance(RentOrderInfo rentOrderInfo) {
		if(verifyBalance(rentOrderInfo)){
			//修改用户账户余额，并更新数据库
			double newBalance = rentOrderInfo.getUser().getBalance()-rentOrderInfo.getAllPayPrice();
			User newUser = rentOrderInfo.getUser();
			newUser.setBalance(newBalance);
			userDao.updateUserInfo(newUser);
			
			//保存用户租赁信息到user_rent表中
			String name = rentOrderInfo.getUser().getName();
			BikeRent bikeRent = bikeRentDao.queryBikeRentByBrid(rentOrderInfo.getBrid());
			String bikeNumber = bikeRent.getBikeNumber();
			String bikeName = bikeRent.getBikeName();
			String shopName = bikeRent.getShopName();
			
		}
		return false;
	}

	@Override
	public boolean caculateReturnBalance(RentOrderInfo rentOrderInfo) {
		// TODO Auto-generated method stub
		return false;
	}

}
