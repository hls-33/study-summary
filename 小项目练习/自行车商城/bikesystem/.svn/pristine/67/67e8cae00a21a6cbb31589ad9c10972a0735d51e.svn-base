package com.bikesystem.hs.dao;

import java.sql.SQLException;
import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import com.bikesystem.entity.BikeRent;
import com.bikesystem.txz.ipml.dao.BaseSystemDao;
import com.bikesystem.utils.JdbcUtils;

/**
 * 车辆出租Dao层实现类
 * @author 祷
 *
 */
public class BikeRentDaoImpl extends BaseSystemDao implements IBikeRentDao{
	private QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
	
	@Override
	public boolean insertBikeRent(BikeRent bikeRent) {
		String sql="insert into bike_rent(bikenumber,bikename,color,kindname," +
				"shopname,hourprice,dayprice,isrented,imgpath,bikedeposit)" +
				"values(?,?,?,?,?,?,?,?,?,?) ";
		try{
			int result = qr.update(sql,bikeRent.getBikeNumber(),bikeRent.getBikeName(),
					bikeRent.getColor(),bikeRent.getKindName(),bikeRent.getShopName(),
					bikeRent.getHourPrice(),bikeRent.getDayPrice(),bikeRent.getIsRented(),
					bikeRent.getImgPath(),bikeRent.getBikedeposit());
			if(result>0){return true;}
		}catch(Exception e){
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean deleteBikeRentById(int brid) {
		String sql="delete from bike_rent where brid=? ";
		try{
			int result = qr.update(sql,brid);
			if(result>0){return true;}
		}catch(Exception e){
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean updateBikeRent(BikeRent bikeRent) {
		String sql="update bike_rent set bikename=?,color=?,kindname=?," +
				"shopname=?,hourprice=?,dayprice=?,isrented=?,imgpath=?,bikedeposit=?,rentcount=? " +
				"where brid=? ";
		try{
			int result = qr.update(sql,bikeRent.getBikeName(),
					bikeRent.getColor(),bikeRent.getKindName(),bikeRent.getShopName(),
					bikeRent.getHourPrice(),bikeRent.getDayPrice(),bikeRent.getIsRented(),
					bikeRent.getImgPath(),bikeRent.getBikedeposit(),bikeRent.getRentCount(),bikeRent.getBrid());
			if(result>0){return true;}
		}catch(Exception e){
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public List<BikeRent> queryAllBikeRentByShopName(String shopName) {
		String sql="select * from bike_rent where shopname=? ";
		try{
			return qr.query(sql, new BeanListHandler<BikeRent>(BikeRent.class),shopName);
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<BikeRent> queryAllBikeRentByBikeName(String bikeName) {
		String sql="select * from bike_rent where bikename like '%?%' ";
		try{
			return qr.query(sql, new BeanListHandler<BikeRent>(BikeRent.class),bikeName);
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
	
	@Override
	public List<BikeRent> queryAllBikeRent(String bikeName, String shopName) {
		String sql="select * from bike_rent where bikename like '%?%' and shopname=?";
		try{
			return qr.query(sql, new BeanListHandler<BikeRent>(BikeRent.class),bikeName,shopName);
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
	

	/**
	 * 根据传入的参数个数来自定义查询因子
	 */
	@Override
	public List<BikeRent> queryAllBikeRentByParameter(Map<String,Object> map) {
		checkParameters(map);
		String sql="select * from bike_rent where 1=1 ";
		//查看是否存在bikename参数，有则要用模糊查询
		Set<Entry<String, Object>> entrs = map.entrySet();
		for(Entry<String, Object> entry : entrs){
			String parameter = entry.getKey();
			Object value=entry.getValue();
			
			if("bikename".equals(parameter)){
				sql+=" and "+parameter+" like '%"+value+"%' ";
			}else if("dayprice".equals(parameter)){
				//如果是传入的日租金范围值，则需要解析
				String[] prices = value.toString().split("~");
				sql+=" and "+parameter+" between "+prices[0]+" and "+prices[1];
			}else {
				sql+=" and "+parameter+" = '"+value+"'";
			}
		}
		System.out.println("sql:"+sql);
		try{
			return qr.query(sql, new BeanListHandler<BikeRent>(BikeRent.class));
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<BikeRent> queryHotBikeRentByShopName(String shopName) {
		String sql="select * from bike_rent where shopname=? order by rentcount desc limit 0,6";
		try{
			return qr.query(sql, new BeanListHandler<BikeRent>(BikeRent.class),shopName);
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<BikeRent> queryAllBikeRent() {
		String sql="select * from bike_rent limit ?,?";
		List<BikeRent> arr=new ArrayList<BikeRent>();
		getPreparedStatement(sql);
		try {
			prep.setInt(1, 0);
			prep.setInt(2, 10);
			res=prep.executeQuery();
			while(res.next()){
				BikeRent bkrent=new BikeRent(res.getInt("brid"),res.getString("bikenumber"), res.getString("bikename"), res.getString("color"),
						res.getString("kindname"), res.getString("shopname"), res.getDouble("hourprice"), 
						res.getShort("dayprice"), res.getString("isrented"), res.getString("imgpath"),
						res.getDouble("bikedeposit"), res.getInt("rentcount"));
				arr.add(bkrent);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{closeAll();}
		return arr;
	}

	@Override
	public List<BikeRent> queryAllBikeRentOrderByRentCount(String shopName) {
		String sql="select * from bike_rent where shopname=? order by rentcount desc ";
		try{
			return qr.query(sql, new BeanListHandler<BikeRent>(BikeRent.class),shopName);
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<BikeRent> queryAllBikeRentOrderByDayPrice(String shopName) {
		String sql="select * from bike_rent where shopname=? order by dayprice desc ";
		try{
			return qr.query(sql, new BeanListHandler<BikeRent>(BikeRent.class),shopName);
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	//封装验证方法，如果value为空，删除这个键值对
	private void checkParameters(Map<String,Object> map){
		Set<Entry<String, Object>> entries = map.entrySet();
		Iterator<Entry<String, Object>> it = entries.iterator();
		List<String> nullKeys = new ArrayList<String>();
		while(it.hasNext()){
			Entry<String, Object> entry = it.next();
			if(entry.getValue() == null){
				nullKeys.add(entry.getKey());
			}
		}
		for(String key : nullKeys){
			map.remove(key);
		}
	}

	@Override
	public List<BikeRent> queryHotBikeRent() {
		String sql="select * from bike_rent order by rentcount desc limit 0,12";
		try{
			return qr.query(sql, new BeanListHandler<BikeRent>(BikeRent.class));
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

}
