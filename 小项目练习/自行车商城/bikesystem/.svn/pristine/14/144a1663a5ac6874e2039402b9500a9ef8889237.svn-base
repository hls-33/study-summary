package com.bikesystem.hp.dao;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanListHandler;

import com.bikesystem.entity.BikeSell;
import com.bikesystem.utils.JdbcUtils;

public class BikeSellDaoImpl extends BaseDao implements IBikeSellDao {
	private QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
	private static final String InsertSellBike = "insert into bike_sell(bikename,bikecount,color,kindname,shopname,bikeprice,imgpath) values(?,?,?,?,?,?,?) ";
	private static final String DeleteSellBike = "delete bike_sell  where bsid=? ";
	private static final String UpdateSellBike = "update bike_sell set bikename=?,bikecount=?,color=?,kindname=?,shopname,bikeprice=?,imgpath=?  where bsid=? ";
	private static final String QuerySellBike = "select  * from bike_sell  where bikeName=?";
	private static final String QueryAllBikeSell = "select  * from bike_sell  where shopname=?";
	private static final String QuerySpecialSellBike = "select  * from bike_sell  where shopname=? and bikename=? ";
/**
 * 插入要卖出的自行车
 * */
	@Override
	public boolean insertBikeSell(BikeSell bikeSell) {
		createPreparedStatement(InsertSellBike);
		try {
			pstmt.setString(1, bikeSell.getBikeName());
			pstmt.setInt(2,bikeSell.getBikeCount());
			pstmt.setString(3, bikeSell.getColor());
			pstmt.setString(4, bikeSell.getKindName());
			pstmt.setString(5, bikeSell.getShopName());
			pstmt.setDouble(6, bikeSell.getBikePrice());
			pstmt.setString(7, bikeSell.getImgPath());
			int rs = pstmt.executeUpdate();
			while(rs>0){
				return true;
				
			}	
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		finally {
			close();
		}
		return false;
	}

	
	/**
	 * 插入已经售出的自行车
	 * */
	@Override
	public boolean deleteBikeSellById(int bsid) {
		createPreparedStatement(DeleteSellBike);
		try {
			pstmt.setInt(1, bsid);
			int rs = pstmt.executeUpdate();
			while(rs>0){
				return true;
			}	
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		finally {
			close();
		}
		
		
		return false;
	}
	/**
	 * 修改自行车的信息
	 * */
	@Override
	public boolean updateBikeSell(BikeSell bike) {
	
		createPreparedStatement(UpdateSellBike);
		try {
			pstmt.setString(1, bike.getBikeName());
			pstmt.setInt(2,bike.getBikeCount());
			pstmt.setString(3, bike.getColor());
			pstmt.setString(4, bike.getKindName());
			pstmt.setString(5, bike.getShopName());
			pstmt.setDouble(6, bike.getBikePrice());
			pstmt.setString(7, bike.getImgPath());
			pstmt.setInt(8, bike.getBsid());
			int rs = pstmt.executeUpdate();
			while(rs>0){
				return true;
			}	
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		finally {
			close();
		}
		
		
		return false;
	}
	/**
	 * 查看所有卖出的自行车
	 * */
	@Override
	public List<BikeSell> queryAllBikeSell(String shopName) {
		createPreparedStatement(QueryAllBikeSell);
		List<BikeSell> list = null;
		try {
			list= new ArrayList<BikeSell>();
			pstmt.setString(1,shopName);
			rs = pstmt.executeQuery();
			while(rs.next()){
				list.add(new BikeSell(rs.getString("bikename"),
						rs.getInt("bikecount"),rs.getString("color"),
						rs.getString("kindname"),rs.getString("shopname"),
						rs.getDouble("bikeprice"),rs.getString("imgpath")));
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		finally {
			close();
		}
		return list;
	}
	/**
	 * 用户自己查看自行车，通过搜索框检索的
	 * */
	@Override
	public List<BikeSell> queryBikeSell(String bikeName) {
		createPreparedStatement(QuerySellBike);
		List<BikeSell> list = null;
		try {
			list= new ArrayList<BikeSell>();
			pstmt.setString(1, bikeName);
			rs = pstmt.executeQuery();
			while(rs.next()){
				//显示自行车的基本信息
				list.add(new BikeSell(rs.getString("bikename"),
						rs.getInt("bikecount"),rs.getString("color"),
						rs.getString("kindname"),rs.getString("shopname"),
						rs.getDouble("bikeprice")));
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		finally {
			close();
		}
		
		return list;
	}
	/**
	 * 查看特定的的自行车
	 * */
	@Override
	public List<BikeSell> querySpecialBikeSell(String bikeName, String shopName) {
		createPreparedStatement(QuerySpecialSellBike);
		List<BikeSell> list = null;
		try {
			list= new ArrayList<BikeSell>();
			pstmt.setString(1, shopName);
			pstmt.setString(2, bikeName);
			rs = pstmt.executeQuery();
			
			while(rs.next()){
				//显示商店的自行车的基本信息
				list.add(new BikeSell(rs.getString("bikename"),
						rs.getInt("bikecount"),rs.getString("color"),
						rs.getString("kindname"),rs.getString("shopname"),
						rs.getDouble("bikeprice"),
						rs.getString("imgpath"),rs.getInt("sellcount")));
			}
		} catch (SQLException e) {
	
			e.printStackTrace();
		}
		finally {
			close();
		}
		
		return list;
	}


	@Override
	public List<BikeSell> queryAllBikeSellByParameter(Map<String, Object> map) {
		String sql="select * from bike_sell where 1=1 ";
		//查看是否存在bikename参数，有则要用模糊查询
		Set<Entry<String, Object>> entrs = map.entrySet();
		for(Entry<String, Object> entry : entrs){
			String parameter = entry.getKey();
			Object value=entry.getValue();
			
			if("bikename".equals(parameter)){
				sql+=" and "+parameter+" like '%"+value+"%' ";
			}else if("bikeprice".equals(parameter)){
				//如果是传入的日租金范围值，则需要解析
				String[] prices = value.toString().split("~");
				sql+=" and "+parameter+" between "+prices[0]+" and "+prices[1];
			}else {
				sql+=" and "+parameter+" = '"+value+"'";
			}
		}
		System.out.println("sql:"+sql);
		try{
			return qr.query(sql, new BeanListHandler<BikeSell>(BikeSell.class));
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<BikeSell> queryHotBikeSellByShopName(String shopName) {
		String sql="select * from bike_sell where shopname=? order by sellcount desc limit 0,8";
		try{
			return qr.query(sql, new BeanListHandler<BikeSell>(BikeSell.class),shopName);
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
}
